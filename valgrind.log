==============================
v0.0.1--normality version

$ valgrind ./a.out -v
==7022== Memcheck, a memory error detector
==7022== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==7022== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==7022== Command: ./a.out -v
==7022== 
v0.0.1
a[0]:0
==7022== 
==7022== HEAP SUMMARY:
==7022==     in use at exit: 0 bytes in 0 blocks
==7022==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==7022== 
==7022== All heap blocks were freed -- no leaks are possible
==7022== 
==7022== For counts of detected and suppressed errors, rerun with: -v
==7022== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

==============================
v0.0.1-1
对于栈的访问越界，valgrind
检查不出来，在代码中加入对数字访问越界的访问，可见效果如下，没有什么特别之处。
$ valgrind ./a.out -v
==7261== Memcheck, a memory error detector
==7261== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==7261== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==7261== Command: ./a.out -v
==7261== 
v0.0.1-1
a[0]:0
a[10]:0
==7261== 
==7261== HEAP SUMMARY:
==7261==     in use at exit: 0 bytes in 0 blocks
==7261==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==7261== 
==7261== All heap blocks were freed -- no leaks are possible
==7261== 
==7261== For counts of detected and suppressed errors, rerun with: -v
==7261== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

==============================
diff --git a/memory_init.c b/memory_init.c
index d42f898..a7150f4 100644
--- a/memory_init.c
+++ b/memory_init.c
@@ -1,7 +1,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 
-#define VERSION	"v0.0.1-1"
+#define VERSION	"v0.0.2-0"
 void printf_version(int argc, char *argv[])
 {
 	int t;
@@ -19,12 +19,10 @@ void printf_version(int argc, char *argv[])
 int main(int argc, char *argv[])
 {
 	printf_version(argc, argv);
-
-	int a[1];
-	a[0] = 0;
-	fprintf(stdout, "a[0]:%d\n", a[0]);
-	a[10] = 0;
-	fprintf(stdout, "a[10]:%d\n", a[10]);
+	int *p;
+	p = malloc(sizeof(*p) * 2);
+	p[2]  = 0;
+	free(p);
 
 	return 0;
 }


$ valgrind ./a.out -v
==8042== Memcheck, a memory error detector
==8042== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==8042== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==8042== Command: ./a.out -v
==8042== 
v0.0.2-0
/* p[2]  = 0; */
==8042== Invalid write of size 4 
==8042==    at 0x8048522: main (memory_init.c:24)
==8042==  Address 0x41f4030 is 0 bytes after a block of size 8 alloc'd
==8042==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==8042==    by 0x8048516: main (memory_init.c:23)
==8042== 
==8042== 
==8042== HEAP SUMMARY:
==8042==     in use at exit: 0 bytes in 0 blocks
==8042==   total heap usage: 1 allocs, 1 frees, 8 bytes allocated
==8042== 
==8042== All heap blocks were freed -- no leaks are possible
==8042== 
==8042== For counts of detected and suppressed errors, rerun with: -v
==8042== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

我们可以看到，无效的写发生在p[2]的地方，数组的最大下标应该是2-1=1。
程序提示我们用-v选项查看更详细的信息：

$ valgrind -v ./a.out -v
==8086== Memcheck, a memory error detector
==8086== Copyright (C) 2002-2011, and GNU GPL'd, by Julian Seward et al.
==8086== Using Valgrind-3.7.0 and LibVEX; rerun with -h for copyright info
==8086== Command: ./a.out -v
==8086== 
--8086-- Valgrind options:
--8086--    --suppressions=/usr/lib/valgrind/debian-libc6-dbg.supp
--8086--    -v
--8086-- Contents of /proc/version:
--8086--   Linux version 3.2.0-55-generic (buildd@allspice) (gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) ) #85-Ubuntu SMP Wed Oct 2 13:43:27 UTC 2013
--8086-- Arch and hwcaps: X86, x86-sse1-sse2
--8086-- Page sizes: currently 4096, max supported 4096
--8086-- Valgrind library directory: /usr/lib/valgrind
--8086-- Reading syms from /lib/i386-linux-gnu/ld-2.15.so (0x4000000)
--8086--   Considering /lib/i386-linux-gnu/ld-2.15.so ..
--8086--   .. CRC mismatch (computed a9bcb2b6 wanted 8af3f2f5)
--8086--   Considering /usr/lib/debug/lib/i386-linux-gnu/ld-2.15.so ..
--8086--   .. CRC is valid
--8086-- Reading syms from /mnt/data/gitstorage/valgrind/a.out (0x8048000)
--8086-- Reading syms from /usr/lib/valgrind/memcheck-x86-linux (0x38000000)
--8086--   Considering /usr/lib/valgrind/memcheck-x86-linux ..
--8086--   .. CRC mismatch (computed 2a2bce46 wanted 9ac1affc)
--8086--    object doesn't have a symbol table
--8086--    object doesn't have a dynamic symbol table
--8086-- Reading suppressions file: /usr/lib/valgrind/debian-libc6-dbg.supp
--8086-- Reading suppressions file: /usr/lib/valgrind/default.supp
==8086== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-8086-by-zly-on-???
==8086== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-8086-by-zly-on-???
==8086== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-8086-by-zly-on-???
==8086== 
==8086== TO CONTROL THIS PROCESS USING vgdb (which you probably
==8086== don't want to do, unless you know exactly what you're doing,
==8086== or are doing some strange experiment):
==8086==   /usr/lib/valgrind/../../bin/vgdb --pid=8086 ...command...
==8086== 
==8086== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==8086==   /path/to/gdb ./a.out
==8086== and then give GDB the following command
==8086==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=8086
==8086== --pid is optional if only one valgrind process is running
==8086== 
--8086-- REDIR: 0x40182e0 (strlen) redirected to 0x38056b04 (???)
--8086-- REDIR: 0x4018060 (index) redirected to 0x38056adf (???)
--8086-- Reading syms from /usr/lib/valgrind/vgpreload_core-x86-linux.so (0x4025000)
--8086--   Considering /usr/lib/valgrind/vgpreload_core-x86-linux.so ..
--8086--   .. CRC mismatch (computed 33f4d79f wanted ac058c14)
--8086--    object doesn't have a symbol table
--8086-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so (0x4028000)
--8086--   Considering /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so ..
--8086--   .. CRC mismatch (computed 8c6a0645 wanted b38afa17)
--8086--    object doesn't have a symbol table
--8086-- Reading syms from /lib/i386-linux-gnu/libc-2.15.so (0x4049000)
--8086--   Considering /lib/i386-linux-gnu/libc-2.15.so ..
--8086--   .. CRC mismatch (computed a80412a6 wanted a2743b32)
--8086--   Considering /usr/lib/debug/lib/i386-linux-gnu/libc-2.15.so ..
--8086--   .. CRC is valid
--8086-- REDIR: 0x40c6d50 (strnlen) redirected to 0x40254a0 (_vgnU_ifunc_wrapper)
--8086-- REDIR: 0x40c82a0 (strncasecmp) redirected to 0x40254a0 (_vgnU_ifunc_wrapper)
--8086-- REDIR: 0x40c6ef0 (__GI_strrchr) redirected to 0x402c1b0 (__GI_strrchr)
--8086-- REDIR: 0x40c6c90 (__GI_strlen) redirected to 0x402c670 (__GI_strlen)
--8086-- REDIR: 0x40c62e0 (__GI_strchr) redirected to 0x402c2d0 (__GI_strchr)
--8086-- REDIR: 0x40c95c0 (strchrnul) redirected to 0x402ebe0 (strchrnul)
v0.0.2-0
--8086-- REDIR: 0x40c2ec0 (free) redirected to 0x402b000 (free)
--8086-- REDIR: 0x40c29e0 (malloc) redirected to 0x402be00 (malloc)
==8086== Invalid write of size 4
==8086==    at 0x8048522: main (memory_init.c:24)
==8086==  Address 0x41f4030 is 0 bytes after a block of size 8 alloc'd
==8086==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==8086==    by 0x8048516: main (memory_init.c:23)
==8086== 
==8086== 
==8086== HEAP SUMMARY:
==8086==     in use at exit: 0 bytes in 0 blocks
==8086==   total heap usage: 1 allocs, 1 frees, 8 bytes allocated
==8086== 
==8086== All heap blocks were freed -- no leaks are possible
==8086== 
==8086== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
==8086== 
==8086== 1 errors in context 1 of 1:
==8086== Invalid write of size 4

/* invald write line number */
==8086==    at 0x8048522: main (memory_init.c:24)
==8086==  Address 0x41f4030 is 0 bytes after a block of size 8 alloc'd
==8086==    at 0x402BE68: malloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)
==8086==    by 0x8048516: main (memory_init.c:23)
==8086== 
==8086== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
我们可以看到写无效的行数。

==============================
==============================

